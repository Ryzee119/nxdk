#ifndef __WUSB_H__
#define __WUSB_H__

#ifdef __cplusplus
extern "C"
{
#endif

#include <windows.h>
#include "winusbio.h"
#include <usb/usbspec.h>

typedef PVOID WINUSB_INTERFACE_HANDLE,*PWINUSB_INTERFACE_HANDLE;
typedef PVOID WINUSB_ISOCH_BUFFER_HANDLE,*PWINUSB_ISOCH_BUFFER_HANDLE;

#pragma pack(push, 1)
typedef struct _WINUSB_SETUP_PACKET
{
    UCHAR RequestType;
    UCHAR Request;
    USHORT Value;
    USHORT Index;
    USHORT Length;
} WINUSB_SETUP_PACKET, *PWINUSB_SETUP_PACKET;
#pragma pack(pop)

typedef LONG USBD_STATUS;

#define USBD_SUCCESS(Status) ((USBD_STATUS) (Status) >= 0)
#define USBD_PENDING(Status) ((ULONG) (Status) >> 30 == 1)
#define USBD_ERROR(Status) ((USBD_STATUS) (Status) < 0)
#define USBD_STATUS_SUCCESS ((USBD_STATUS) 0x00000000)
#define USBD_STATUS_PENDING ((USBD_STATUS) 0x40000000)
#define USBD_STATUS_CRC ((USBD_STATUS) 0xc0000001)
#define USBD_STATUS_BTSTUFF ((USBD_STATUS) 0xc0000002)
#define USBD_STATUS_DATA_TOGGLE_MISMATCH ((USBD_STATUS) 0xc0000003)
#define USBD_STATUS_STALL_PID ((USBD_STATUS) 0xc0000004)
#define USBD_STATUS_DEV_NOT_RESPONDING ((USBD_STATUS) 0xc0000005)
#define USBD_STATUS_PID_CHECK_FAILURE ((USBD_STATUS) 0xc0000006)
#define USBD_STATUS_UNEXPECTED_PID ((USBD_STATUS) 0xc0000007)
#define USBD_STATUS_DATA_OVERRUN ((USBD_STATUS) 0xc0000008)
#define USBD_STATUS_DATA_UNDERRUN ((USBD_STATUS) 0xc0000009)
#define USBD_STATUS_RESERVED1 ((USBD_STATUS) 0xc000000a)
#define USBD_STATUS_RESERVED2 ((USBD_STATUS) 0xc000000b)
#define USBD_STATUS_BUFFER_OVERRUN ((USBD_STATUS) 0xc000000c)
#define USBD_STATUS_BUFFER_UNDERRUN ((USBD_STATUS) 0xc000000d)
#define USBD_STATUS_NOT_ACCESSED ((USBD_STATUS) 0xc000000f)
#define USBD_STATUS_FIFO ((USBD_STATUS) 0xc0000010)
#define USBD_STATUS_XACT_ERROR ((USBD_STATUS) 0xc0000011)
#define USBD_STATUS_BABBLE_DETECTED ((USBD_STATUS) 0xc0000012)
#define USBD_STATUS_DATA_BUFFER_ERROR ((USBD_STATUS) 0xc0000013)
#define USBD_STATUS_NO_PING_RESPONSE ((USBD_STATUS) 0xc0000014)
#define USBD_STATUS_INVALID_STREAM_TYPE ((USBD_STATUS) 0xc0000015)
#define USBD_STATUS_INVALID_STREAM_ID ((USBD_STATUS) 0xc0000016)
#define USBD_STATUS_ENDPOINT_HALTED ((USBD_STATUS) 0xc0000030)
#define USBD_STATUS_INVALID_URB_FUNCTION ((USBD_STATUS) 0x80000200)
#define USBD_STATUS_INVALID_PARAMETER ((USBD_STATUS) 0x80000300)
#define USBD_STATUS_ERROR_BUSY ((USBD_STATUS) 0x80000400)
#define USBD_STATUS_INVALID_PIPE_HANDLE ((USBD_STATUS) 0x80000600)
#define USBD_STATUS_NO_BANDWIDTH ((USBD_STATUS) 0x80000700)
#define USBD_STATUS_INTERNAL_HC_ERROR ((USBD_STATUS) 0x80000800)
#define USBD_STATUS_ERROR_SHORT_TRANSFER ((USBD_STATUS) 0x80000900)
#define USBD_STATUS_BAD_START_FRAME ((USBD_STATUS) 0xc0000a00)
#define USBD_STATUS_ISOCH_REQUEST_FAILED ((USBD_STATUS) 0xc0000b00)
#define USBD_STATUS_FRAME_CONTROL_OWNED ((USBD_STATUS) 0xc0000c00)
#define USBD_STATUS_FRAME_CONTROL_NOT_OWNED ((USBD_STATUS) 0xc0000d00)
#define USBD_STATUS_NOT_SUPPORTED ((USBD_STATUS) 0xc0000e00)
#define USBD_STATUS_INAVLID_CONFIGURATION_DESCRIPTOR ((USBD_STATUS) 0xc0000f00)
#define USBD_STATUS_INSUFFICIENT_RESOURCES ((USBD_STATUS) 0xc0001000)
#define USBD_STATUS_SET_CONFIG_FAILED ((USBD_STATUS) 0xc0002000)
#define USBD_STATUS_BUFFER_TOO_SMALL ((USBD_STATUS) 0xc0003000)
#define USBD_STATUS_INTERFACE_NOT_FOUND ((USBD_STATUS) 0xc0004000)
#define USBD_STATUS_INAVLID_PIPE_FLAGS ((USBD_STATUS) 0xc0005000)
#define USBD_STATUS_TIMEOUT ((USBD_STATUS) 0xc0006000)
#define USBD_STATUS_DEVICE_GONE ((USBD_STATUS) 0xc0007000)
#define USBD_STATUS_STATUS_NOT_MAPPED ((USBD_STATUS) 0xc0008000)
#define USBD_STATUS_HUB_INTERNAL_ERROR ((USBD_STATUS) 0xc0009000)
#define USBD_STATUS_CANCELED ((USBD_STATUS) 0xc0010000)
#define USBD_STATUS_ISO_NOT_ACCESSED_BY_HW ((USBD_STATUS) 0xc0020000)
#define USBD_STATUS_ISO_TD_ERROR ((USBD_STATUS) 0xc0030000)
#define USBD_STATUS_ISO_NA_LATE_USBPORT ((USBD_STATUS) 0xc0040000)
#define USBD_STATUS_ISO_NOT_ACCESSED_LATE ((USBD_STATUS) 0xc0050000)
#define USBD_STATUS_BAD_DESCRIPTOR ((USBD_STATUS) 0xc0100000)
#define USBD_STATUS_BAD_DESCRIPTOR_BLEN ((USBD_STATUS) 0xc0100001)
#define USBD_STATUS_BAD_DESCRIPTOR_TYPE ((USBD_STATUS) 0xc0100002)
#define USBD_STATUS_BAD_INTERFACE_DESCRIPTOR ((USBD_STATUS) 0xc0100003)
#define USBD_STATUS_BAD_ENDPOINT_DESCRIPTOR ((USBD_STATUS) 0xc0100004)
#define USBD_STATUS_BAD_INTERFACE_ASSOC_DESCRIPTOR ((USBD_STATUS) 0xc0100005)
#define USBD_STATUS_BAD_CONFIG_DESC_LENGTH ((USBD_STATUS) 0xc0100006)
#define USBD_STATUS_BAD_NUMBER_OF_INTERFACES ((USBD_STATUS) 0xc0100007)
#define USBD_STATUS_BAD_NUMBER_OF_ENDPOINTS ((USBD_STATUS) 0xc0100008)
#define USBD_STATUS_BAD_ENDPOINT_ADDRESS ((USBD_STATUS) 0xc0100009)

typedef struct _USBD_ISO_PACKET_DESCRIPTOR {
  ULONG Offset;
  ULONG Length;
  USBD_STATUS Status;
} USBD_ISO_PACKET_DESCRIPTOR,*PUSBD_ISO_PACKET_DESCRIPTOR;

BOOL WinUsb_AbortPipe (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID);
BOOL WinUsb_ControlTransfer (WINUSB_INTERFACE_HANDLE InterfaceHandle, WINUSB_SETUP_PACKET SetupPacket, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred, LPOVERLAPPED Overlapped);
BOOL WinUsb_FlushPipe (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID);
BOOL WinUsb_Free (WINUSB_INTERFACE_HANDLE InterfaceHandle);
BOOL WinUsb_GetAdjustedFrameNumber (PULONG CurrentFrameNumber, LARGE_INTEGER TimeStamp);
BOOL WinUsb_GetAssociatedInterface (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AssociatedInterfaceIndex, PWINUSB_INTERFACE_HANDLE AssociatedInterfaceHandle);
BOOL WinUsb_GetCurrentAlternateSetting (WINUSB_INTERFACE_HANDLE InterfaceHandle, PUCHAR SettingNumber);
BOOL WinUsb_GetCurrentFrameNumber (WINUSB_INTERFACE_HANDLE InterfaceHandle, PULONG CurrentFrameNumber, LARGE_INTEGER* TimeStamp);
BOOL WinUsb_GetDescriptor (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR DescriptorType, UCHAR Index, USHORT LanguageID, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred);
BOOL WinUsb_GetOverlappedResult (WINUSB_INTERFACE_HANDLE InterfaceHandle, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait);
BOOL WinUsb_GetPipePolicy (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, ULONG PolicyType, PULONG ValueLength, PVOID Value);
BOOL WinUsb_GetPowerPolicy (WINUSB_INTERFACE_HANDLE InterfaceHandle, ULONG PolicyType, PULONG ValueLength, PVOID Value);
BOOL WinUsb_Initialize (HANDLE DeviceHandle, PWINUSB_INTERFACE_HANDLE InterfaceHandle);
PUSB_INTERFACE_DESCRIPTOR WinUsb_ParseConfigurationDescriptor (PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PVOID StartPosition, LONG InterfaceNumber, LONG AlternateSetting, LONG InterfaceClass, LONG InterfaceSubClass, LONG InterfaceProtocol);
PUSB_COMMON_DESCRIPTOR WinUsb_ParseDescriptors (PVOID DescriptorBuffer, ULONG TotalLength, PVOID StartPosition, LONG DescriptorType);
BOOL WinUsb_ReadIsochPipe (WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, PULONG FrameNumber, ULONG NumberOfPackets, PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors, LPOVERLAPPED Overlapped);
BOOL WinUsb_ReadIsochPipeAsap (WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, BOOL ContinueStream, ULONG NumberOfPackets, PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors, LPOVERLAPPED Overlapped);
BOOL WinUsb_ReadPipe (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred, LPOVERLAPPED Overlapped);
BOOL WinUsb_RegisterIsochBuffer(WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, PUCHAR Buffer, ULONG BufferLength, PWINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle);
BOOL WinUsb_QueryDeviceInformation (WINUSB_INTERFACE_HANDLE InterfaceHandle, ULONG InformationType, PULONG BufferLength, PVOID Buffer);
BOOL WinUsb_QueryInterfaceSettings (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AlternateInterfaceNumber, PUSB_INTERFACE_DESCRIPTOR UsbAltInterfaceDescriptor);
BOOL WinUsb_QueryPipe (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AlternateInterfaceNumber, UCHAR PipeIndex, PWINUSB_PIPE_INFORMATION PipeInformation);
BOOL WinUsb_QueryPipeEx (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AlternateInterfaceNumber, UCHAR PipeIndex, PWINUSB_PIPE_INFORMATION_EX PipeInformationEx);
BOOL WinUsb_ResetPipe (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID);
BOOL WinUsb_SetCurrentAlternateSetting (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR SettingNumber);
BOOL WinUsb_SetPipePolicy (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, ULONG PolicyType, ULONG ValueLength, PVOID Value);
BOOL WinUsb_SetPowerPolicy (WINUSB_INTERFACE_HANDLE InterfaceHandle, ULONG PolicyType, ULONG ValueLength, PVOID Value);
BOOL WinUsb_UnregisterIsochBuffer(WINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle);
BOOL WinUsb_WriteIsochPipe (WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, PULONG FrameNumber, LPOVERLAPPED Overlapped);
BOOL WinUsb_WriteIsochPipeAsap (WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, BOOL ContinueStream, LPOVERLAPPED Overlapped);
BOOL WinUsb_WritePipe (WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred, LPOVERLAPPED Overlapped);

#ifdef __cplusplus
}
#endif

#endif
